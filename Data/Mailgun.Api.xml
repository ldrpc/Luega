<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Mailgun.Api</name></assembly>
<members>
<member name="P:Mailgun.Api.SendOpts.deliveryTime">
<summary>
 max +3 days
</summary>
</member>
<member name="P:Mailgun.Api.Message.body">
<summary>
 always UTF8 encoded
</summary>
</member>
<member name="P:Mailgun.Api.Message.subject">
<summary>
 always UTF8 encoded
</summary>
</member>
<member name="T:Mailgun.Logging.CombiningTarget">
<summary>
 A logger to use for combining a number of other loggers
</summary>
</member>
<member name="T:Mailgun.Logging.ConsoleWindowTarget">
<summary>
 Log a line with the given format, printing the current time in UTC ISO-8601 format
 and then the string, like such:
 &apos;2013-10-13T13:03:50.2950037Z: today is the day&apos;
</summary>
</member>
<member name="M:Mailgun.Logging.Logger.logWithAck(Mailgun.Logging.LogLevel,Microsoft.FSharp.Core.FSharpFunc{Mailgun.Logging.LogLevel,Mailgun.Logging.Message})">
<summary>
 Evaluates the callback if the log level is enabled. Returns an async that
 itself completes when the logging infrastructure has finished writing that
 Message. Completes directly if nothing is logged. What the ack means from
 a durability standpoint depends on the logging infrastructure you&apos;re using
 behind this facade. Will not block, besides doing the computation inside
 the callback. You should not do blocking operations in the callback.
</summary>
</member>
<member name="M:Mailgun.Logging.Logger.logSimple(Mailgun.Logging.Message)">
<summary>
 Logs the message without awaiting the logging infrastructure&apos;s ack of
 having successfully written the log message. What the ack means from a
 durability standpoint depends on the logging infrastructure you&apos;re using
 behind this facade.
</summary>
</member>
<member name="M:Mailgun.Logging.Logger.log(Mailgun.Logging.LogLevel,Microsoft.FSharp.Core.FSharpFunc{Mailgun.Logging.LogLevel,Mailgun.Logging.Message})">
<summary>
 Evaluates the callback if the log level is enabled. Will not block,
 besides doing the computation inside the callback. You should not do
 blocking operations in the callback.
</summary>
</member>
<member name="T:Mailgun.Logging.Logger">
<summary>
 The logger is the interface for calling code to use for logging.
</summary>
</member>
<member name="P:Mailgun.Logging.Message.level">
<summary>
 How important? See the docs on the LogLevel type for details.
</summary>
</member>
<member name="P:Mailgun.Logging.Message.timestamp">
<summary>
 When? nanoseconds since UNIX epoch.
</summary>
</member>
<member name="P:Mailgun.Logging.Message.fields">
<summary>
 The semantic-logging data.
</summary>
</member>
<member name="P:Mailgun.Logging.Message.value">
<summary>
 The main value for this metric or event. Either a Gauge or an Event. (A
 discriminated union type)
</summary>
</member>
<member name="P:Mailgun.Logging.Message.name">
<summary>
 The &apos;path&apos; or &apos;name&apos; of this data point. Do not confuse template in
 (Event template) = message.value
</summary>
</member>
<member name="P:Mailgun.Logging.Message.utcTicks">
<summary>
 Gets the ticks for UTC since 0001-01-01 00:00:00 for this message. You
 can pass this value into a DateTimeOffset c&apos;tor
</summary>
</member>
<member name="P:Mailgun.Logging.Message.README">
<summary>
 If you&apos;re looking for how to transform the Message&apos;s fields, then use the
 module methods rather than instance methods, since you&apos;ll be creating new
 values rather than changing an existing value.
</summary>
</member>
<member name="T:Mailgun.Logging.Message">
<summary>
 This is record that is logged. It&apos;s capable of representing both metrics
 (gauges) and events. See https://github.com/logary/logary for details.
</summary>
</member>
<member name="T:Mailgun.Logging.EpochNanoSeconds">
<summary>
 The # of nanoseconds after 1970-01-01 00:00:00.
</summary>
</member>
<member name="T:Mailgun.Logging.PointValue.Gauge">
<summary>
 This is as value for a metric, with a unit attached. The unit can be
 something like Seconds or Hz.
</summary>
</member>
<member name="T:Mailgun.Logging.PointValue.Event">
<summary>
 An event is what it sounds like; something occurred and needs to be
 logged. Its field is named &apos;template&apos; because it should not be interpolated
 with values; instead these values should be put in the &apos;fields&apos; field of
 the Message.
</summary>
</member>
<member name="T:Mailgun.Logging.PointValue">
<summary>
 Represents a logged value; either a Gauge or an Event.
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel.Fatal">
<summary>
 The log message denotes a fatal error which cannot be recovered from. The
 service should be shut down. Human corrective action is needed.
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel.Error">
<summary>
 The log message is at an error level, meaning an unhandled exception
 occurred at a location where it is deemed important to keeping the service
 running. A human should take corrective action.
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel.Warn">
<summary>
 The log message is a warning; e.g. there was an unhandled exception or
 an even occurred which was unexpected. Sometimes human corrective action
 is needed.
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel.Info">
<summary>
 The log message is informational; e.g. the service started, stopped or
 some important business event occurred.
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel.Debug">
<summary>
 The log message is at a default level, debug level. Useful for shipping to
 infrastructure that further processes it, but not so useful for human
 inspection in its raw format, except during development.
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel.Verbose">
<summary>
 The log message is not that important; can be used for intricate debugging.
</summary>
</member>
<member name="M:Mailgun.Logging.LogLevel.toInt">
<summary>
 Turn the LogLevel into an integer
</summary>
</member>
<member name="M:Mailgun.Logging.LogLevel.ofString(System.String)">
<summary>
 Converts the string passed to a Loglevel.
</summary>
</member>
<member name="M:Mailgun.Logging.LogLevel.ofInt(System.Int32)">
<summary>
 Turn an integer into a LogLevel
</summary>
</member>
<member name="M:Mailgun.Logging.LogLevel.ToString">
<summary>
 Converts the LogLevel to a string
</summary>
</member>
<member name="T:Mailgun.Logging.LogLevel">
<summary>
 The log level denotes how &apos;important&apos; the gauge or event message is.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.addExn``1(``0,Mailgun.Logging.Message)">
<summary>
 Adds an exception to the Message, to the &apos;errors&apos; field, inside a list.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.setLevel(Mailgun.Logging.LogLevel,Mailgun.Logging.Message)">
<summary>
 Sets the level on the log message.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.setTimestamp(System.Int64,Mailgun.Logging.Message)">
<summary>
 Sets the timestamp on the log message.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.setFieldValue``1">
<summary>
 Alias to `setField`
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.setField(System.String,System.Object,Mailgun.Logging.Message)">
<summary>
 Sets the value of the field on the log message.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.setSingleName(System.String,Mailgun.Logging.Message)">
<summary>
 Sets the name as a single string; if this string contains dots, the string
 will be split on these dots.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.setName(System.String[],Mailgun.Logging.Message)">
<summary>
 Sets the name/path of the log message.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.gauge(System.Int64,System.String)">
<summary>
 Create a new instantaneous value in a log message.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.eventX(System.String,Mailgun.Logging.LogLevel)">
<summary>
 Create a new event log message â€“ like `event` but with parameters flipped.
 Useful to use with `Logger.log` with point-free style, to reduce the
 noise.
</summary>
</member>
<member name="M:Mailgun.Logging.MessageModule.event(Mailgun.Logging.LogLevel,System.String)">
<summary>
 Create a new event log message.
</summary>
</member>
<member name="M:Mailgun.Logging.Log.createHiera(System.String[])">
<summary>
 Create an hierarchically named logger
</summary>
</member>
<member name="M:Mailgun.Logging.Log.create(System.String)">
<summary>
 Create a named logger. Full stop (.) acts as segment delimiter in the
 hierachy of namespaces and loggers.
</summary>
</member>
<member name="T:Mailgun.Logging.Log">
<summary>
 Module for acquiring static loggers (when you don&apos;t want or can&apos;t)
 pass loggers as values.
</summary>
</member>
<member name="T:Mailgun.Logging.Global.Flyweight">
<summary>
 The flyweight just references the current configuration. If you want
 multiple per-process logging setups, then don&apos;t use the static methods,
 but instead pass a Logger instance around, setting the name field of the
 Message value you pass into the logger.
</summary>
</member>
<member name="M:Mailgun.Logging.Global.initialise(Mailgun.Logging.LoggingConfig)">
<summary>
 Call from the initialisation of your library. Initialises the
 Logary.Facade globally/per process.
</summary>
</member>
<member name="P:Mailgun.Logging.Global.DefaultConfig">
<summary>
 The global default configuration, which logs to Console at Info level.
</summary>
</member>
<member name="M:Mailgun.Logging.Formatting.defaultFormatter(Mailgun.Logging.Message)">
<summary>
 let the ISO8601 love flow
</summary>
</member>
<member name="T:Mailgun.Logging.LoggerEx">
<summary>
 Syntactic sugar on top of Logger for F# libraries.
</summary>
</member>
<member name="M:Mailgun.Logging.DateTimeOffset.ticksUTC(System.Int64)">
<summary>
 Get the DateTimeOffset ticks from EpochNanoSeconds
</summary>
</member>
<member name="M:Mailgun.Logging.DateTimeOffset.timestamp(System.DateTimeOffset)">
<summary>
 Get the Logary timestamp off the DateTimeOffset.
</summary>
</member>
<member name="T:Mailgun.Logging.DateTimeOffset">
<summary>
 Extensions to DateTimeOffset.
</summary>
</member>
<member name="M:Mailgun.Logging.DateTime.ticksUTC(System.Int64)">
<summary>
 Get the DateTimeOffset ticks off from the EpochNanoSeconds
</summary>
</member>
<member name="M:Mailgun.Logging.DateTime.timestamp(System.DateTime)">
<summary>
 Get the Logary timestamp off the DateTime.
</summary>
</member>
<member name="T:Mailgun.Logging.DateTime">
<summary>
 Extensions to DateTime.
</summary>
</member>
</members>
</doc>
